latcheck_client v2.0: TLS延时检测客户端

一、项目概述
本程序是TLS客户端，使用Qt/C++和QML实现，具有图形用户界面。
主要功能是连接TLS服务器进行用户认证，获取全球测试服务器列表，执行ICMP延时检测，并上传检测报告到服务器。

二、界面设计要求
1. 全英文界面和英文日志输出
2. 使用QML+C++架构实现
3. 支持Windows操作系统
4. 响应式界面设计，适配不同分辨率

三、主界面功能
1. 位置信息输入：
   - Location输入框，用于填写客户端所在位置
   - 自动定位复选框，支持联网自动获取位置信息
   - 位置信息在开始检测后自动保存到配置文件

2. 控制按钮：
   - Start按钮：开始延时检测流程
   - Stop按钮：立即终止当前检测任务
   - Login按钮：连接服务器并进行用户认证

3. 状态显示：
   - 实时日志输出窗口
   - 当前连接状态显示
   - 检测进度显示
   - 统一状态消息显示（3秒自动清除）

四、配置界面功能
1. 界面入口：主界面右上角齿轮图标
2. 配置项目：
   - 用户登录信息（用户名、密码）
   - TLS服务器地址和端口（默认8443）
   - 线程数量设置（默认50个线程）
   - 客户端证书文件路径（PEM格式）
   - 自动定位服务配置

3. 数据安全：
   - 密码使用AES256-GCM对称存储，加密密码hard code为“Medbot8848@hlht”，IV为机器的ID转换而来。这样保证配置文件拷贝到其它机器上无法使用


五、网络通信协议
1. TLS连接：
   - 支持TLS 1.2及以上版本
   - 客户端证书验证（暂时不做）
   - 连接状态管理和异常处理

2. 消息协议（与服务器保持一致）：
   消息头格式（8字节）：
   - msg_type (4字节): 消息类型
   - data_length (4字节): 数据长度

   支持的消息类型：
   - LOGIN_REQUEST (0x0001): 发送登录请求
   - LIST_REQUEST (0x0004): 请求服务器列表
   - REPORT_REQUEST (0x0006): 上传检测报告

   数据格式：
   - LOGIN_REQUEST: user_name(32字节) + password_hash(32字节)
   - LIST_REQUEST: 无数据部分
   - REPORT_REQUEST: location_length(4字节) + location(变长) + record_count(4字节) + [server_id(4字节) + latency(4字节)] * record_count

六、延时检测功能
1. 服务器列表获取：
   - 向服务器发送LIST_REQUEST
   - 解析LIST_RESPONSE获取服务器IP列表
   - 验证接收到的数据完整性

2. 多线程ICMP检测：
   - 根据配置的线程数量分配IP地址
   - 每个线程独立执行ICMP ping检测
   - 支持检测过程中的实时进度更新
   - 异常IP处理和超时机制

3. 结果汇总和上传：
   - 收集所有线程的检测结果
   - 按照服务器返回的IP顺序整理数据
   - 构造REPORT_REQUEST消息上传结果
   - 等待服务器确认（REPORT_OK/REPORT_FAIL）

七、日志系统
1. 日志文件：
   - 文件名格式：latcheck_YYYYMMDD_HHMM.log
   - 自动保存到程序目录的logs子文件夹

2. 日志内容：
   - 程序启动和退出标记
   - TLS连接建立和断开
   - 用户登录成功/失败
   - 服务器列表获取过程
   - 本次检测的位置信息、延时检测开始、结束时间
   - 每个位置ID的检测结果（该ID列表和IP列表从服务器获得，但日志不记录IP）
   - 报告上传成功/失败
   - 错误和异常信息

八、错误处理
1. 网络错误：
   - TLS连接失败处理
   - 服务器响应超时
   - 网络中断恢复机制

2. 认证错误：
   - 用户名或密码错误提示
   - 账户被禁用提示
   - 权限不足提示

3. 检测错误：
   - ICMP检测失败处理
   - 部分IP无响应处理
   - 线程异常终止处理

九、配置文件格式
配置文件：config.json
```json
{
  "server": {
    "ip": "127.0.0.1",
    "port": 8443
  },
  "threading": {
    "count": 50
  },
  "auth": {
    "username": "",
    "password_hash": "",
    "salt": ""
  },
  "location": {
    "text": "",
    "auto": false
  },
  "certificates": {
    "client_cert": "",
    "client_key": ""
  },
  "ssl": {
    "ignore_errors": true
  }
}
```
