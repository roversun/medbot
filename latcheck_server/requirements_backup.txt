latcheck_server v1.0: 
一、说明
本程序是tls服务器，Qt/C++实现，无UI，使用mysql数据库，编译和运行在ubuntu服务器下。
主要功能是实现客户端远程登录，存储tls客户端上传检测报告，并提供https rest查询接口查询任意两个地点之间的延时信息（查询下面的calculated_latencies数据库）。

二、数据库设计：
数据库：latency_check
表设计：
account:存储登录账号，包含fields：user_name(32 chars，主键),密码hash值，nick_name(32 chars),tel（手机号，字符串类型，可选），email（字符串，可选），country(国家），province（省份），city（城市），desc（128 chars，用户描述），level:(int, 0-disable, 1-报告上传用户，2-报告查询用户，3-admin)
test_server:存储全球数百个测试云服务器位置信息和对应的IP地址，大概500多条数据，包含fields：server_id(unique,index,autoincreament),location(64 chars,unique),ip_addr(Int32), active(是否活跃，本服务器只选择active是true的返回), update_time
latcheck_report:存储客户端上来的报告基本信息，包含fields：report_id(unique,index,autoincreament)，check_location(64 chars, 客户端上传的检测位置信息), user_name（创建者的账号名称）, created_time
report_detail: 存储latcheck_report报告包含的有效检查记录，将包含上百万的数据记录，包含fields：record_id（unique，index,autoincreament），report_id(对应的latcheck_report的报告ID)，server_id(对应test_server中的server_id),ip_addr(int32, ip地址整数值),latency(DECIMAL(5, 2) ), updated_time
calculated_latencies: 在每次报告上传后，服务器会调用后台程序计算检查地点之间的延时，该程序会更新此表格，包含fields：id(index, autoincreament),report1(较小的report_id),report2(较大的report_id),latency(DECIMAL(5, 2)),server_id,created_time

三、软件功能需求-客户端登录和报告上传

1.服务器和客户端之间通过控制信息而不是字符串来通信，通过类型msg_type来区分信息类型，然后针对性处理。

2.实现tls服务器，客户端连接成功后，当用户发送msg_type=LOGIN_REQUEST信息，包括用户名，密码hash，服务器校验正确后（根据用户名读取account表的密码hash值做对比），发送msg_type=LOGIN_OK给客户端并保持连接，失败发送msg_type=LOGIN_FAIL，然后断开连接。

3.每次客户端发送msg_type=LIST_REQUEST，服务器都需要从mysql表test_server中读取active的server_id列表和对应的IP列表（IP为4字节整数）并发送给客户端，msg_type=LIST_RESPONSE。

4.当客户端发送msg_type=REPORT_REQUEST时，其携带的数据：客户端所在位置字符串（最大64字符），然后是server_id列表和对应的延时数据列表，服务器需要在表latcheck_report中生成新的记录，同时在report_detail表中存储每一条延时记录。处理完成后向客户端发送msg_type=REPORT_OK确认，否则发送msg_type=REPORT_FAIL，并附带64字节的文字描述。

5. 服务器需要处理客户端异常断开连接的情况，清理相关的连接状态和临时数据。

6. 实现基本的日志记录功能（本地文本追加保存，按天生成新的日志文件保存），记录客户端连接、登录、数据上报等关键操作，便于问题排查和系统监控。

7. 支持多客户端并发连接，每个客户端维护独立的会话状态，确保数据不会混淆。

8. 数据库连接池管理，优化数据库访问性能，支持高并发场景下的数据存储。

9. 配置文件支持：服务器启动参数（端口号、数据库连接信息、TLS证书路径等）通过配置文件进行管理，便于部署和维护。

四、软件功能需求-账号管理
1. 当account没有任何账号时，则第一个注册的账号默认为管理员账号。
2. 管理员可实现账号管理，服务器增加：增、删、改、查接口
3. 普通账号（level=1或2),只能更改自己的账号信息，账号名不可更改

五、软件功能需求-https rest服务器
1.提供账号登录和账号信息修改接口（post）

2.提供get_all_latencies接口
输入：无
成功返回：提供calculated_latencies所有数据，将report1(较小的report_id),report2(较大的report_id),latency(DECIMAL(5, 2)),server_id对应的location，封装成json格式列表返回。
失败返回：failure json，包含错误描述

3.提供get_latency接口
输入：check_location 1，check_location 2
成功返回：从latcheck_report分别查找最新的“check_location 1”和“check_location 2”的report_id，然后从calculated_latencies查找符合的记录，将latency(DECIMAL(5, 2)),server_id对应的location,created_time封装成json对象返回。
失败返回：failure json，包含错误描述

4.提供get_report接口
输入：report_id
成功返回：从latcheck_report根据report_id查找符合的记录，封装成json对象返回。
失败返回：failure json，包含错误描述

5.提供get_report_detail接口
输入：report_id
成功返回：从report_detail根据report_id查找所有符合的记录，将（server_id对应的location,ip_addr(int32, ip地址整数值),latency(DECIMAL(5, 2) )）封装成json对象下面的列表（report_id:xxx,detail:[])返回。
失败返回：failure json，包含错误描述

6.提供get_all_reports接口
输入：无
成功返回：从latcheck_report查找所有记录，封装成列表返回返回。
失败返回：failure json，包含错误描述


## 项目架构分析
这个项目需要实现以下核心模块：

1. 1.
   TLS服务器模块 - 处理客户端连接和二进制消息通信
2. 2.
   HTTPS REST API模块 - 提供Web API接口
3. 3.
   数据库管理模块 - MySQL连接池和数据访问层
4. 4.
   用户认证模块 - 登录验证和权限控制
5. 5.
   配置管理模块 - JSON配置文件解析
6. 6.
   日志系统模块 - 分级日志和轮转机制
7. 7.
   安全模块 - 加密、证书管理、访问控制
## 实现计划
我将按照以下步骤逐步实现：

### 第一阶段：基础架构搭建
1. 1.
   更新CMakeLists.txt，添加必要的Qt模块和第三方库
2. 2.
   创建项目目录结构
3. 3.
   实现配置管理模块
4. 4.
   实现日志系统
5. 5.
   实现数据库连接池
### 第二阶段：核心功能实现
1. 1.
   实现消息协议定义
2. 2.
   实现TLS服务器
3. 3.
   实现用户认证和权限管理
4. 4.
   实现数据库访问层
### 第三阶段：业务逻辑实现
1. 1.
   实现客户端登录处理
2. 2.
   实现服务器列表服务
3. 3.
   实现报告上传处理
4. 4.
   实现延时计算逻辑
### 第四阶段：REST API实现
1. 1.
   实现HTTPS服务器
2. 2.
   实现所有REST API端点
3. 3.
   实现Token认证机制
### 第五阶段：安全和运维
1. 1.
   实现安全机制
2. 2.
   实现监控和告警
3. 3.
   实现健康检查
4. 4.
   完善错误处理